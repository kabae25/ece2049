#include <msp430.h>
#include <stdlib.h>
#include "peripherals.h"

#define SECONDS_YEAR (12*30*60*60)
#define SECONDS_MONTH (30*60*60)
#define SECONDS_DAY (24*60*60)
#define SECONDS_HOUR (60*60)
#define SECONDS_MINUTE (60)

void configureButtons(void);
unsigned char getButtonState(void);
void swDelay(unsigned char numLoops);
void runtimerA2(void);
void stoptimerA2(bool reset);
void convert_seconds(unsigned long long total_seconds);
float configAdcRegs(void);
float get_temp(float degC_per_bit);
float average_arr(float* array, int length);
int isButtonPressed(volatile char *button_reg, char button_mask);
void dispTime(unsigned long long time);

unsigned long long timer_cnt=0;
char tdir = 1;
bool update = true;

enum TempUnits {Far, Cel};
unsigned int USER_TEMP_SELECTION = Far;

unsigned int pot_value;

// List of Possible States
enum States {DISPLAY, EDIT};

char displayMonthStr[4];
unsigned int seconds;
unsigned int minutes;
unsigned int hours;
unsigned int days;

/**
 * For edit mode
 */
unsigned char menu = 0;
unsigned long long timer_cnt_offset = 0;
unsigned long long timer_cnt_offset_prev = 0;
unsigned long long monthOffset = 0;
unsigned long long dayOffset = 0;
unsigned long long hourOffset = 0;
unsigned long long minuteOffset = 0;
unsigned long long secondOffset = 0;

/**
 * For the temperature adc stuff
 */

// Temperature Sensor Calibration = Reading at 30 degrees C is stored at addr 1A1Ah
// See end of datasheet for TLV table memory mapping
#define CALADC12_15V_30C  *((unsigned int *)0x1A1A)
// Temperature Sensor Calibration = Reading at 85 degrees C is stored at addr 1A1Ch                                            //See device datasheet for TLV table memory mapping
#define CALADC12_15V_85C  *((unsigned int *)0x1A1C)
unsigned int in_temp;

float tempArray[30] = {0}; // set the temp array to 0 to begin
unsigned int tempArrayBuffer = 0; // set the temp counter for the ADC

volatile float degC_per_bit;
volatile float temperatureDegC;
volatile float temperatureDegF;
volatile unsigned int bits30, bits85;

volatile unsigned int i;
/**
 * main.c
 */

void scrollInitialize(){
    //Scroll wheel stuff
    // Configure P8.0 as digital IO output and set it to 1
    // This supplied 3.3 volts across scroll wheel potentiometer
    // See schematic at end or MSP-EXP430F5529 board users guide
    P8SEL &= ~BIT0;
    P8DIR |= BIT0;
    P8OUT |= BIT0;

    P6SEL |= BIT0; // Input channel A0
    P6SEL |= BIT1; // Input channel A1

}

int scrollMain(){
    ADC12CTL0 &= ~ADC12SC;      // clear the start bit
    ADC12CTL0 |= ADC12SC;               // Sampling and conversion start
                        // Single conversion (single channel)
    while (ADC12CTL1 & ADC12BUSY){
        __no_operation();
    }

    return ADC12MEM1 & 0x0FFF;
}

char state = DISPLAY;
int tempC;
int tempF;

int main(void) {

    WDTCTL = WDTPW | WDTHOLD;// stop watchdog timer

    float degperbit = configAdcRegs();
    float temp_arr[30] = {60.0};
    float temp_avg;

    /**
     * Init the rest
     */
    _BIS_SR(GIE);//enables interupts
    runtimerA2();//starts timer

    configureButtons();
    configDisplay();
    configKeypad();
    initLeds();


    int index = 0;//for temperature
    bool arrayFilled; //for temp
    
    
    Graphics_clearDisplay(&g_sContext); // Clear the display
    displayMonthStr[0] = 'J';
    displayMonthStr[1] = 'A';
    displayMonthStr[2] = 'N';
    displayMonthStr[3] = '\0';
    /**
     * Main Program Loop
     */
    while (1) {
        // State Machine
        

        switch (state) {
            case(DISPLAY):
                if(update){//this will run every 1 second
                    // conversions from running time to time
                    float temp = get_temp(degperbit);
                    temp_arr[index] = temp;
                    if(arrayFilled){
                        temp_avg = average_arr(temp_arr, 30);
                    }
                    else{
                        temp_avg = average_arr(temp_arr, index);
                    }
                    tempC = (int)(temp_avg); // Convert to tenths of a degree
                    tempF = (int)((temp_avg * 9.0 / 5.0 + 32.0));
            
                    //update index for temp_arr
                    if (index == 29){
                        index = 0;
                        arrayFilled = true;
                    }
                    else{
                        index++;
                    }

                    dispTime(timer_cnt);
                    update = false;
                }
                break;

            case(EDIT):
                if (update) {


                    unsigned long long newTime;
                    
                    pot_value = scrollMain();
                    Graphics_clearDisplay(&g_sContext); // Clear the display


                    newTime = monthOffset + dayOffset + hourOffset + minuteOffset + secondOffset;
                    dispTime(newTime);

                    switch (menu) {
                        case 1: // the month
                            Graphics_drawStringCentered(&g_sContext, "Edit: Month", AUTO_STRING_LENGTH, 48, 8, TRANSPARENT_TEXT);
                            int pot_month = pot_value / 342;
                            monthOffset = pot_month * SECONDS_MONTH; break;


                        case 2: // the day
                            Graphics_drawStringCentered(&g_sContext, "Edit: Day", AUTO_STRING_LENGTH, 48, 8, TRANSPARENT_TEXT);
                            int pot_day = pot_value / 136; 
                            dayOffset = pot_day * SECONDS_DAY; break;

                        case 3: // the hour
                            Graphics_drawStringCentered(&g_sContext, "Edit: Hour", AUTO_STRING_LENGTH, 48, 8, TRANSPARENT_TEXT);
                            int pot_hour = pot_value / 69; 
                            hourOffset = pot_hour * SECONDS_HOUR; break;


                        case 4: // the minute
                            Graphics_drawStringCentered(&g_sContext, "Edit: Minute", AUTO_STRING_LENGTH, 48, 8, TRANSPARENT_TEXT);
                            int pot_minute = pot_value / 69; 
                            minuteOffset = pot_minute * SECONDS_MINUTE; break;


                        case 5: // the second
                            Graphics_drawStringCentered(&g_sContext, "Edit: Second", AUTO_STRING_LENGTH, 48, 8, TRANSPARENT_TEXT);
                            int pot_second = pot_value / 69; 
                            secondOffset = pot_second; break;

                        }
                    Graphics_flushBuffer(&g_sContext);
                    update = false;
                }
            break;

        }
        if (isButtonPressed(P2IN, BIT1)) { // get the button state directly
            if (menu < 6) {
                menu++;
                state = EDIT;
            }
            else {
                menu = 0;
                timer_cnt = monthOffset + dayOffset + hourOffset + minuteOffset + secondOffset; // set the timer_cnt when we leave the edit state
                state = DISPLAY;
            }
        }
    }
}//end main

void dispTime(unsigned long long time){
    char tempStrF[3];  // Array to hold the string representation of the temperature
    tempStrF[0] = (((int)tempF)/10) + 0x30;
    tempStrF[1] = (((int)tempF)%10) + 0x30;
    tempStrF[2] = '\0';

    char tempStrC[3];  // Array to hold the string representation of the temperature
    tempStrC[0] = (((int)tempC)/10) + 0x30;
    tempStrC[1] = (((int)tempC)%10) + 0x30;
    tempStrC[2] = '\0';

    convert_seconds(time);
    char displayDayStr[3];
    displayDayStr[0] = (days/10) + 0x30;
    displayDayStr[1] = (days%10) + 0x30;
    displayDayStr[2] = '\0';

    char displayTimeStr[9];
    displayTimeStr[0] = (hours/10) + 0x30;
    displayTimeStr[1] = (hours%10) + 0x30;
    displayTimeStr[2] = ':';
    displayTimeStr[3] = (minutes/10) + 0x30;
    displayTimeStr[4] = (minutes%10) + 0x30;
    displayTimeStr[5] = ':';
    displayTimeStr[6] = (seconds/10) + 0x30;
    displayTimeStr[7] = (seconds%10) + 0x30;
    displayTimeStr[8] = '\0';

    Graphics_clearDisplay(&g_sContext); // Clear the display

    Graphics_drawStringCentered(&g_sContext, "THE TEMPERATURE", AUTO_STRING_LENGTH, 48, 18, TRANSPARENT_TEXT);
    Graphics_drawStringCentered(&g_sContext, tempStrF, AUTO_STRING_LENGTH, 14, 28, TRANSPARENT_TEXT);
    Graphics_drawStringCentered(&g_sContext, "F", AUTO_STRING_LENGTH, 24, 28, TRANSPARENT_TEXT);
    Graphics_drawStringCentered(&g_sContext, tempStrC, AUTO_STRING_LENGTH, 54, 28, TRANSPARENT_TEXT);
    Graphics_drawStringCentered(&g_sContext, "C", AUTO_STRING_LENGTH, 64, 28, TRANSPARENT_TEXT);
                    //
    Graphics_drawStringCentered(&g_sContext, "THE DATE & TIME", AUTO_STRING_LENGTH, 48, 48, TRANSPARENT_TEXT);
    Graphics_drawStringCentered(&g_sContext, displayMonthStr          , AUTO_STRING_LENGTH, 36, 58, TRANSPARENT_TEXT);
    Graphics_drawStringCentered(&g_sContext, displayDayStr          , AUTO_STRING_LENGTH, 56, 58, TRANSPARENT_TEXT);
    Graphics_drawStringCentered(&g_sContext, displayTimeStr          , AUTO_STRING_LENGTH, 48, 68, TRANSPARENT_TEXT);
    Graphics_flushBuffer(&g_sContext);
}

int isButtonPressed(volatile char *button_reg, char button_mask) {
    static uint8_t last_state = 0; // Static variable to store the previous state of the button

    // Read the current state of the button
    uint8_t current_state = (*button_reg & button_mask) ? 1 : 0;

    // Detect rising edge (button press but not held)
    if (current_state && !last_state) {
        last_state = current_state; // Update last state
        return 1; // Button press detected
    }

    // Update last state for next check
    last_state = current_state;
    return 0; // No button press detected
}

float configAdcRegs(void){
    volatile unsigned int bits30, bits85;
    volatile float degC_per_bit;
    REFCTL0 &= ~REFMSTR; // Reset REFMSTR to hand over control of internal ref voltage
    ADC12CTL0 = ADC12SHT0_9 | ADC12REFON | ADC12ON | ADC12MSC; // Internal ref = 1.5V
    ADC12CTL1 = ADC12SHP | ADC12CONSEQ_1; // Enable sample timer
    ADC12MCTL0 = ADC12SREF_1 + ADC12INCH_10;
    ADC12MCTL1 = ADC12SREF_0 + ADC12INCH_0 + ADC12EOS; // stop reading after this register
    __delay_cycles(100); // delay to allow Ref to settle
    ADC12CTL0 |= ADC12ENC;

    // Use calibration data stored in info memory
    bits30 = CALADC12_15V_30C;
    bits85 = CALADC12_15V_85C;
    return ((float)(85.0 - 30.0))/((float)(bits85-bits30));
}

float get_temp(float degC_per_bit){
    ADC12CTL0 &= ~ADC12SC; // clear the start bit
    ADC12CTL0 |= ADC12SC; // Sampling and conversion start single conversion (single channel)

    //Poll busy bit waiting for conversion to complete
    while (ADC12CTL1 & ADC12BUSY)
        __no_operation();

    in_temp = ADC12MEM0; // Read in results if conversion
    float outTemp = (float)((long)in_temp - CALADC12_15V_30C) * degC_per_bit + 30.0;
    return outTemp;
}

float average_arr(float* array, int length){
    //averages the values in an array
    float average;
    int sum =0;
    int i=0;
    for(i=0; i<length; i++){
        sum = sum + array[i];
    }

    average = sum/length;
    return average;
}

void convert_seconds(unsigned long long total_seconds) {
    // Calculate number of days
    days = (total_seconds / (24 * 3600)) + 1;
    total_seconds %= (24 * 3600);

    // Calculate number of hours
    hours = total_seconds / 3600;
    total_seconds %= 3600;

    // Calculate number of minutes
    minutes = total_seconds / 60;

    // Remaining seconds
    seconds = total_seconds % 60;

    //find the month
    if(days > 335){
        displayMonthStr[0] = 'D';
        displayMonthStr[1] = 'E';
        displayMonthStr[2] = 'C';
        days -= 335;
    }
    else if(days > 305){
        displayMonthStr[0] = 'N';
        displayMonthStr[1] = 'O';
        displayMonthStr[2] = 'V';
        days -= 305;
    }
    else if(days > 274){
        displayMonthStr[0] = 'O';
        displayMonthStr[1] = 'C';
        displayMonthStr[2] = 'T';
        days -= 274;
    }
    else if(days >244){
        displayMonthStr[0] = 'S';
        displayMonthStr[1] = 'E';
        displayMonthStr[2] = 'P';
        days -= 244;
    }
    else if(days > 213){
        displayMonthStr[0] = 'A';
        displayMonthStr[1] = 'U';
        displayMonthStr[2] = 'G';
        days -= 213;
    }
    else if(days > 182){
        displayMonthStr[0] = 'J';
        displayMonthStr[1] = 'U';
        displayMonthStr[2] = 'L';
        days -= 182;
    }
    else if(days > 152){
        displayMonthStr[0] = 'J';
        displayMonthStr[1] = 'U';
        displayMonthStr[2] = 'N';
        days -= 152;
    }
    else if(days > 121){
        displayMonthStr[0] = 'M';
        displayMonthStr[1] = 'A';
        displayMonthStr[2] = 'Y';
        days -= 121;
    }
    else if(days > 91){
        displayMonthStr[0] = 'A';
        displayMonthStr[1] = 'P';
        displayMonthStr[2] = 'R';
        days -= 91;
    }
    else if(days > 60){
        displayMonthStr[0] = 'M';
        displayMonthStr[1] = 'A';
        displayMonthStr[2] = 'R';
        days -= 60;
    }
    else if(days > 31){
        displayMonthStr[0] = 'F';
        displayMonthStr[1] = 'E';
        displayMonthStr[2] = 'B';
        days -= 31;
    }
    else{
        displayMonthStr[0] = 'J';
        displayMonthStr[1] = 'A';
        displayMonthStr[2] = 'N';
    }
}

// prelab 2
void configureButtons(void) {
    // Configure DI/O
    P7SEL &= ~(BIT0); // S1: 7.0

    // Set direction to input
    P7DIR |= (BIT0|BIT4);

    // Enable pull resistors
    P7REN |= (BIT0|BIT4);

    // Configure to pull up
    P7OUT |= (BIT0|BIT4);
}

unsigned char getButtonState(void) {
    unsigned char retVal = 0; // make empty

    retVal |= (P7IN &= (BIT0)); // get button S1

    return ~retVal & 0x0F;
}

void swDelay(unsigned char numLoops) {
    volatile unsigned int i,j;  // volatile to prevent removal in optimization
                                // by compiler. Functionally this is useless code
    for (j=0; j<numLoops; j++) {
        i = 500;                    // SW Delay
        while (i > 0){               // could also have used while (i)
           i--;
        }
    }
}

void timerDelay(long unsigned int ms) {
    long unsigned int base = timer_cnt;
    while((timer_cnt - base) < ms){
        __no_operation();
    }
}

//TIMER SETUP
void runtimerA2(void) {
    TA2CTL = TASSEL_1 + MC_1 + ID_0;
    TA2CCR0 = 32768;//interupt every 1 second
    TA2CCTL0 = CCIE;
}

void stoptimerA2(bool reset){
    TA2CTL = MC_0;
    TA2CCTL0 &= ~CCIE;
    if(reset){
        timer_cnt=0;
    }
}

#pragma vector = TIMER2_A0_VECTOR//timer count increses by 1 every ms
__interrupt void TimerA2_ISR (void) {
    update = true;
    if (tdir){
        if (state == DISPLAY) {
            timer_cnt++;
        }
        if (timer_cnt == 31536000){
            timer_cnt = 0;
        }
        if (timer_cnt%100==0) { //Blinks LEDs once a second
            P1OUT = P1OUT ^ BIT0;
            P4OUT ^= BIT7;
        }
    }
    else{
        timer_cnt--;
    }
}