#include <msp430.h>
#include <stdio.h>
#include <stdlib.h>
#include "peripherals.h"
 
#define CALADC12_15V_30C *((unsigned int *)0x1A1A)
#define CALADC12_15V_85C *((unsigned int *)0x1A1C)
/**
 * main.c
 */
void displayTime(long unsigned int time);
void runtimerA2(void);
void initButtons(void);
char returnButtons(void);
void displayTemp(float inAvgTempC);
int readScrollWheel(void);
float configAdcRegs(void);
float get_temp(float degC_per_bit);
float average_arr(float* array, int length);
volatile unsigned long int globalTime = 0;
volatile unsigned long int timeToSet=0;
unsigned int in_temp;
char *monthNames[] = {"JAN", "FEB", "MAR", "APR", "MAY", "JUN","JUL", "AUG", "SEP", "OCT", "NOV", "DEC"};
typedef enum{
              DISPLAY,
              EDIT
}States;
typedef enum{
              MONTH,
              DAY,
              HOUR,
              MINUTE,
              SECOND
}Types;
int main()
{
              WDTCTL = WDTPW | WDTHOLD;
   configDisplay();
              runtimerA2();
              initButtons();
              __enable_interrupt(); // Enable global interrupts
              float temp;
              States state;
              state = DISPLAY;
              long int tempTime = 0;
              float temp_arr[30];
              float temp_avg;
              int flag =0;
              float degperbit = configAdcRegs();
              int index = 0;
              while(1){
              switch(state){
              case(DISPLAY):
               //globalTime=timeToSet;
               tempTime = globalTime;
              Types type;
               type=MONTH;
               long unsigned int newTime = 0;
               int wheel =0;
              while(state==DISPLAY){
               temp = get_temp(degperbit);
               temp_arr[index] = temp;
               temp_avg = average_arr(temp_arr, 30);
 
               if(globalTime-tempTime>=3){
                tempTime = globalTime;
                displayTime(tempTime);
                displayTemp(temp_avg);
               }
               if(index == 29){
                index = 0;
               }
               else{
                index++;
               }
               if(returnButtons()==1)
                state=EDIT;
              }
               break;
 
              case(EDIT):
              tempTime = globalTime;
              displayTime(tempTime);
 
              int month;
              while(state==EDIT){
               if(returnButtons()==2){
               state=DISPLAY;
               break;
               }
 
              if(type==MONTH){
               if(returnButtons()==4){
               type=DAY;
               break;
               }
              wheel=readScrollWheel();
              if (wheel < 250) {
               month = 1;
              } else if ( 250<= wheel && wheel < 500) {
               month = 2;
              } else if (500 <= wheel && wheel < 750) {
               month = 3;
              } else if (750 <= wheel && wheel < 1000) {
               month = 4;
              } else if (1000 <= wheel && wheel < 1250) {
               month = 5;
              } else if (1250 <= wheel && wheel < 1500) {
               month = 6;
              } else if (1500 <= wheel && wheel < 1750) {
               month = 7;
              } else if (1750 <= wheel && wheel < 2000) {
               month = 8;
              } else if (2000 <= wheel && wheel < 2250) {
               month = 9;
              } else if (2250 <= wheel && wheel < 2500) {
               month = 10;
              } else if (2500 <= wheel && wheel < 2750) {
               month = 11;
              } else if (2750 <= wheel) {
               month = 12;
              }
              if(month==1)
               newTime=0;
              if(month==2)
               newTime=2678400;
              if(month==3)
               newTime=5097600;
              if(month==4)
               newTime=7776000;
              if(month==5)
               newTime=10368000;
              if(month==6)
               newTime=13046400;
              if(month==7)
               newTime=15638400;
              if(month==8)
               newTime=18316800;
              if(month==9)
               newTime=20995200;
              if(month==10)
               newTime=23587200;
              if(month==11)
               newTime=26265600;
              if(month==12)
               newTime=28857600;
              if(returnButtons()==2){
               state = DISPLAY;
               break;
              }
              }
              if(type==DAY){
              if (returnButtons()==4){
              type=HOUR;
              break;
              }
              int first;
              first = readScrollWheel();
              int fin = 0;
              int second;
              int diff;
              while(!fin){
               if(returnButtons()==4||returnButtons()==2){
               fin=1;
               }
               second = readScrollWheel();
               diff = second-first;
               if(second>=3000||first>=3000){
               second=3000;
               first=3000;
               diff=0;
               fin=1;
               }
               if(diff>50){
               newTime+=86400;
               fin = 1;
               }
               else if(first-second>50){
               newTime-=86400;
               fin = 1;
               }
              }
              if(returnButtons()==2){
               state = DISPLAY;
               break;
               }
              }
              if(type==HOUR){
               if(returnButtons()==4){
               type=MINUTE;
               break;
               }
               int first;
               first = readScrollWheel();
               int fin = 0;
               int second;
               int diff;
               while(!fin){
               if(returnButtons()==4||returnButtons()==2){
                fin=1;
               }
               second = readScrollWheel();
               diff = second-first;
               if(diff>50){
                newTime+=3600;
                fin = 1;
               }
               else if(first-second>50){
                newTime-=3600;
                fin = 1;
               }
               }
               if(returnButtons()==2){
                state = DISPLAY;
                break;
               }
               }
               if(type==MINUTE){
               if(returnButtons()==4){
               type=SECOND;
               break;
               }
               int first;
               first = readScrollWheel();
               int fin = 0;
               int second;
               int diff;
               while(!fin){
                if(returnButtons()==4||returnButtons()==2){
                              fin=1;
                }
                second = readScrollWheel();
                diff = second-first;
                if(diff>50){
                              newTime+=60;
                              fin = 1;
                }
                else if(first-second>50){
                              newTime-=60;
                              fin = 1;
                }
               }
               if(returnButtons()==2){
                              state = DISPLAY;
                              break;
                }
               }
               if(type == SECOND){
               if(returnButtons()==4){
               type=MONTH;
               break;
               }
               if(returnButtons()==2){
                               state = DISPLAY;
                               break;
               }
               int first;
               first = readScrollWheel();
               int fin = 0;
               int second;
               int diff;
               while(!fin){
                if(returnButtons()==4||returnButtons()==2){
                              fin=1;
                }
                second = readScrollWheel();
                diff = second-first;
                if(diff>50){
                              newTime++;
                              fin = 1;
                }
                else if(first-second>50){
                              newTime--;
                              fin = 1;
                }
               }
               }
 
   displayTime(newTime);
   globalTime=newTime;
              }
   break;
              }
 
}
return 0;
}
void displayTime(long unsigned int inTime) {
              const unsigned long SECONDS_PER_MINUTE = 60;
              const unsigned long SECONDS_PER_HOUR = 3600;
              const unsigned long SECONDS_PER_DAY = 86400;
 
              unsigned int daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
              unsigned long timeRemaining = inTime;
              unsigned int month = 0;
 
              char dateStr[16];
              char timeStr[16];
 
              // Calculate month
              while (timeRemaining >= daysInMonth[month] * SECONDS_PER_DAY) {
               timeRemaining -= daysInMonth[month] * SECONDS_PER_DAY;
               month++;
              }
 
              // Calculate day, hours, minutes, seconds
              unsigned int day = timeRemaining / SECONDS_PER_DAY + 1;
              timeRemaining %= SECONDS_PER_DAY;
              unsigned int hours = timeRemaining / SECONDS_PER_HOUR;
              timeRemaining %= SECONDS_PER_HOUR;
              unsigned int minutes = timeRemaining / SECONDS_PER_MINUTE;
              unsigned int seconds = timeRemaining % SECONDS_PER_MINUTE;
 
              // Build strings manually using integer math
              int dateIndex = 0;
 
              // Date string: e.g., "FEB 15"
              const char *ptr = monthNames[month]; // Declare the pointer
              while (*ptr != '\0') {
               dateStr[dateIndex++] = *ptr; // Copy month name
               ptr++;
              }
              dateStr[dateIndex++] = ' ';
              dateStr[dateIndex++] = (day / 10) + '0';  // Tens digit of day
              dateStr[dateIndex++] = (day % 10) + '0';  // Units digit of day
              dateStr[dateIndex] = '\0';  // Null-terminate string
 
              // Time string: e.g., "14:23:45"
              int timeIndex = 0;
              timeStr[timeIndex++] = (hours / 10) + '0';  // Tens digit of hour
              timeStr[timeIndex++] = (hours % 10) + '0';  // Units digit of hour
              timeStr[timeIndex++] = ':';
              timeStr[timeIndex++] = (minutes / 10) + '0';  // Tens digit of minutes
              timeStr[timeIndex++] = (minutes % 10) + '0';  // Units digit of minutes
              timeStr[timeIndex++] = ':';
              timeStr[timeIndex++] = (seconds / 10) + '0';  // Tens digit of seconds
              timeStr[timeIndex++] = (seconds % 10) + '0';  // Units digit of seconds
              timeStr[timeIndex] = '\0';  // Null-terminate string
 
              // Display on the screen
              Graphics_clearDisplay(&g_sContext);
              Graphics_drawStringCentered(&g_sContext, dateStr, AUTO_STRING_LENGTH, 48, 35, TRANSPARENT_TEXT);
              Graphics_drawStringCentered(&g_sContext, timeStr, AUTO_STRING_LENGTH, 48, 45, TRANSPARENT_TEXT);
              Graphics_flushBuffer(&g_sContext);
}


void displayTemp(float inAvgTempC) {
              int tempCInt = (int)(inAvgTempC * 10); // Convert to tenths of a degree
              int tempFInt = (int)((inAvgTempC * 9.0 / 5.0 + 32.0) * 10);
 
              char tempCStr[16];
              char tempFStr[16];
              snprintf(tempCStr, sizeof(tempCStr), "Temp (C): %d.%d C", tempCInt / 10, tempCInt % 10);
              snprintf(tempFStr, sizeof(tempFStr), "Temp (F): %d.%d F", tempFInt / 10, tempFInt % 10);
 
              Graphics_drawStringCentered(&g_sContext, tempCStr, AUTO_STRING_LENGTH, 48, 55, TRANSPARENT_TEXT);
              Graphics_drawStringCentered(&g_sContext, tempFStr, AUTO_STRING_LENGTH, 48, 65, TRANSPARENT_TEXT);
              Graphics_flushBuffer(&g_sContext);
}
 
void runtimerA2(void)
{
// This function configures and starts Timer A2
// Timer is counting ~0.01 seconds
//
// Input: none, Output: none
//
// smj, ECE2049, 17 Sep 2013
//
// Use ACLK, 16 Bit, up mode, 1 divider
TA2CTL = TASSEL_1 + MC_1 + ID_0;
TA2CCR0 = 32768;
TA2CCTL0 = CCIE; // TA2CCR0 interrupt enabled
}
int readScrollWheel() {
              int scrollValue;
              ADC12CTL0 &= ~ADC12SC;     // Clear the start bit
              ADC12CTL0 |= ADC12SC;         // Start conversion
              int timeout = 100000; // Set an appropriate timeout value
              while ((ADC12CTL1 & ADC12BUSY) && (--timeout > 0)) {
               __no_operation(); // Optional: allow for debugging
              }
              scrollValue = ADC12MEM1& 0x0FFF;
              if(scrollValue>3000)
               scrollValue=3000;// Store the ADC result
              return scrollValue;
}
void initButtons(){
              P7SEL &= ~(BIT4);
              P7DIR &= ~(BIT4);
              P7REN |= (BIT4);
              P7OUT |= (BIT4);
              //S4
              P2SEL &= ~(BIT2);
              P2DIR &= ~(BIT2);
              P2REN |= (BIT2);
              P2OUT |= (BIT2);
              //S3
              P3SEL &= ~(BIT6);
              P3DIR &= ~(BIT6);
              P3REN |= (BIT6);
              P3OUT |= (BIT6);
              //S2
              P7SEL &= ~(BIT0);
              P7DIR &= ~(BIT0);
              P7REN |= (BIT0);
              P7OUT |= (BIT0);
              //S1
}
char returnButtons(){
              char x = 0;
              if((P7IN&BIT4)==0)
               x=4;
              if((P2IN&BIT2)==0)
               x=3;
              if((P3IN&BIT6)==0)
               x=2;
              if((P7IN&BIT0)==0)
               x=1;
              return x;
 
}
float average_arr(float* array, int length){
              //averages the values in an array
              float average;
              int sum =0;
              int i=0;
              for(i=0; i<length; i++){
               sum = sum + array[i];
              }
              average = sum/length;
              return average;
}

float get_temp(float degC_per_bit){
              ADC12CTL0 &= ~ADC12SC; // clear the start bit
              ADC12CTL0 |= ADC12SC; // Sampling and conversion start single conversion (single channel)
 
              //Poll busy bit waiting for conversion to complete
              int timeout = 100000; // Set an appropriate timeout value
              while ((ADC12CTL1 & ADC12BUSY) && (--timeout > 0)) {
               __no_operation(); // Optional: allow for debugging
              }
              in_temp = ADC12MEM0; // Read in results if conversion
              float outTemp = (float)((long)in_temp - CALADC12_15V_30C) * degC_per_bit +30.0;
              return outTemp;
}
float configAdcRegs(void){
              volatile unsigned int bits30, bits85;
              volatile float degC_per_bit;
              P8SEL &= ~BIT0;
              P8DIR |= BIT0;
              P8OUT |= BIT0;
              REFCTL0 &= ~REFMSTR; // Reset REFMSTR to hand over control of internal ref voltage
              ADC12MCTL0 = ADC12SREF_1 + ADC12INCH_10; // ADC i/p ch A10 = temp sense
              ADC12CTL0 = ADC12SHT0_9 | ADC12REFON | ADC12ON; // Internal ref = 1.5V
              __delay_cycles(100); // Allow reference to stabilize
              ADC12CTL1 = ADC12SHP | ADC12CONSEQ_1;  // Enable sample timer and sequence-of-channels mode            ADC12MCTL0 = ADC12SREF_1 + ADC12INCH_10; // ADC i/p ch A10 = temp sense
              ADC12MCTL1 = ADC12SREF_0 + ADC12INCH_0 | ADC12EOS; // Second channel: Scroll wheel (A0), end of sequence
              __delay_cycles(100); // delay to allow Ref to settle
              ADC12CTL0 |= ADC12ENC;
 
              // Use calibration data stored in info memory
              bits30 = CALADC12_15V_30C;
              bits85 = CALADC12_15V_85C;
              return ((float)(85.0 - 30.0))/((float)(bits85-bits30));
}
 
#pragma vector=TIMER2_A0_VECTOR
__interrupt void TimerA2_ISR (void)
{
              globalTime++;
}